{"version":3,"sources":["Contcts/index.js","Contcts/contact.js","App.js","serviceWorker.js","index.js"],"names":["searchingFor","term","x","lastName","toLowerCase","includes","Contracts","props","contacts","firstName","phone","gender","state","searchHandler","bind","this","filter","map","i","event","setState","target","value","className","type","onChange","getFirstName","getLastName","getPhone","React","Component","ContactBook","pros","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAEA,SAASA,EAAaC,GAClB,OAAO,SAASC,GACpB,OAAOA,EAAEC,SAASC,cAAcC,SAASJ,EAAKG,iBAAmBH,G,IAsFlDK,E,kDA3Bf,WAAYC,GAAO,IAAD,8BACV,cAAMA,IAvDNC,SAAW,CAAC,CACRC,UAAW,uCACXN,SAAU,qEACVO,MAAO,gBACPC,OAAQ,QACT,CACCF,UAAW,iCACXN,SAAU,+DACVO,MAAO,gBACPC,OAAQ,UACT,CACCF,UAAW,6CACXN,SAAU,mDACVO,MAAO,iBACR,CACCD,UAAW,iCACXN,SAAU,mDACVO,MAAO,gBACPC,OAAQ,UACT,CACCF,UAAW,uCACXN,SAAU,yDACVO,MAAO,gBACPC,OAAQ,QACT,CACCF,UAAW,uCACXN,SAAU,6CACVO,MAAO,gBACPC,OAAQ,SA4BZ,EAAKC,MAAO,CACRJ,SAAU,EAAKA,SACfP,KAAM,IAIV,EAAKY,cAAgB,EAAKA,cAAcC,KAAnB,gBARX,E,2DArBV,OACIC,KAAKH,MAAMJ,SAASQ,OAAOhB,EAAae,KAAKH,MAAMX,OAAOgB,KAAI,SAACC,GAAD,OAC1D,2BAAIA,EAAET,gB,oCAId,OACIM,KAAKH,MAAMJ,SAASQ,OAAOhB,EAAae,KAAKH,MAAMX,OAAOgB,KAAI,SAACC,GAAD,OAC1D,2BAAIA,EAAEf,e,iCAMd,OACIY,KAAKH,MAAMJ,SAASQ,OAAOhB,EAAae,KAAKH,MAAMX,OAAOgB,KAAI,SAACC,GAAD,OACtD,2BAAIA,EAAER,c,mDAeRS,GAClBJ,KAAKK,SAAS,CAACnB,KAAMkB,EAAME,OAAOC,U,+BAG1B,OACI,yBAAKC,UAAW,KACZ,8BACI,2BAAOC,KAAK,OAAOC,SAAUV,KAAKF,cAAeS,MAAOP,KAAKd,QAEjE,yBAAKsB,UAAW,KAAhB,KAAwBR,KAAKW,eAA7B,KACA,yBAAKH,UAAW,KAAhB,IAAuBR,KAAKY,eAC5B,iCAAOZ,KAAKa,iB,GA5EJC,IAAMC,WCYfC,MAhBf,SAAqBC,GACjB,OACI,6BACI,yBAAKT,UAAW,WACZ,yBAAKA,UAAW,QAAhB,sBACA,yBAAKA,UAAW,YAAhB,oDACA,yBAAKA,UAAW,UAAhB,mCAEJ,6BACI,kBAAC,EAAD,SCFDU,MARf,WACE,OACE,yBAAKV,UAAU,OACX,kBAAC,EAAD,QCMYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ac370d9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Style_Contact_Book.css'\r\nfunction searchingFor(term) {\r\n    return function(x) {\r\nreturn x.lastName.toLowerCase().includes(term.toLowerCase()) || !term;\r\n    }\r\n\r\n}\r\nclass Contracts extends React.Component {\r\n        contacts = [{\r\n            firstName: \"Барней\",\r\n            lastName: \"Стинсовский\",\r\n            phone: \"+380956319521\",\r\n            gender: \"male\"\r\n        }, {\r\n            firstName: \"Робин\",\r\n            lastName: \"Щербатская\",\r\n            phone: \"+380931460123\",\r\n            gender: \"female\"\r\n        }, {\r\n            firstName: \"Аномный\",\r\n            lastName: \"Анонимус\",\r\n            phone: \"+380666666666\"\r\n        }, {\r\n            firstName: \"Лилия\",\r\n            lastName: \"Олдровна\",\r\n            phone: \"+380504691254\",\r\n            gender: \"female\"\r\n        }, {\r\n            firstName: \"Маршэн\",\r\n            lastName: \"Эриксонян\",\r\n            phone: \"+380739432123\",\r\n            gender: \"male\"\r\n        }, {\r\n            firstName: \"Теодор\",\r\n            lastName: \"Мотсбэс\",\r\n            phone: \"+380956319521\",\r\n            gender: \"male\"\r\n        }];\r\n\r\n\r\n    getFirstName() {\r\n        return (\r\n            this.state.contacts.filter(searchingFor(this.state.term)).map((i) => (\r\n                <p>{i.firstName}</p>\r\n            )))\r\n    }\r\n    getLastName(){\r\n        return(\r\n            this.state.contacts.filter(searchingFor(this.state.term)).map((i)=>(\r\n                <p>{i.lastName}</p>\r\n                )\r\n            )\r\n        )\r\n    }\r\n    getPhone(){\r\n        return(\r\n            this.state.contacts.filter(searchingFor(this.state.term)).map((i)=>(\r\n                    <p>{i.phone}</p>\r\n                )\r\n            )\r\n        )\r\n    }\r\nconstructor(props){\r\n        super(props);\r\n        this.state ={\r\n            contacts: this.contacts,\r\n            term: '',\r\n\r\n        };\r\n\r\n        this.searchHandler = this.searchHandler.bind(this);\r\n}\r\n    searchHandler(event){\r\nthis.setState({term: event.target.value})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'t'}>\r\n                <form>\r\n                    <input type=\"text\" onChange={this.searchHandler} value={this.term}/>\r\n                </form>\r\n                <div className={'i'}>  {this.getFirstName()} </div>\r\n                <div className={'u'}> {this.getLastName()}</div>\r\n                <div> {this.getPhone()}</div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Contracts\r\n","import React from \"react\";\r\nimport \"./Style_Contact_Book.css\"\r\nimport Contracts from './index.js'\r\n\r\nfunction ContactBook(pros) {\r\n    return (\r\n        <div>\r\n            <div className={'wrapper'}>\r\n                <div className={'name'}>Імя</div>\r\n                <div className={'sureName'}>Прізвище</div>\r\n                <div className={'number'}>Номер</div>\r\n            </div>\r\n            <div>\r\n                <Contracts/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactBook;","import React from 'react';\nimport './App.css';\nimport ContactBook from  './Contcts/contact'\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ContactBook/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}